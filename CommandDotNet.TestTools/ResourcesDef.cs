using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using CommandDotNet.Extensions;

namespace CommandDotNet.TestTools
{
    public class ResourcesDef
    {
        public static ICollection<ResourcesDef> Parse(params Type[] types) => types.Select(Parse).ToCollection();

        public static ResourcesDef Parse<T>() => Parse(typeof(T));
        
        public static ResourcesDef Parse(Type type)
        {
            var properties = type.GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly);
            var methods = type.GetMethods(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly)
                .Where(m => !m.IsSpecialName);

            return new ResourcesDef(type, properties.ToCollection(), methods.ToCollection());
        }
            
        public ResourcesDef(Type type, ICollection<PropertyInfo> properties, ICollection<MethodInfo> methods)
        {
            Type = type;
            Properties = properties;
            Methods = methods;
        }

        public Type Type { get; }
        public ICollection<PropertyInfo> Properties { get; }
        public ICollection<MethodInfo> Methods { get; }

        public IEnumerable<(string error, ICollection<MemberInfo> members)> Validate()
        {
            var invalid = Methods
                .Where(m => m.GetParameters().Any(p => p.ParameterType != typeof(string)))
                .Cast<MemberInfo>()
                .ToList();
            
            if (invalid.Any())
            {
                yield return ("Proxy method parameters must be of type string", invalid);
            }
        }

        public string? GenerateProxyClass()
        {
            var proxyCode = new StringBuilder();

            foreach (var property in Properties)
            {
                proxyCode.AppendLine(
                    $"        public override string {property.Name} =>{Environment.NewLine}" +
                    $"            _localize(base.{property.Name}){Environment.NewLine}" +
                    $"            ?? base.{property.Name};");
            }

            proxyCode.AppendLine();

            foreach (var method in Methods)
            {
                var parameters = method.GetParameters();
                var paramDef = parameters.Select(p => $"string {p.Name}").ToCsv(", ");
                var paramPlaceHolders = parameters.Select((p, i) => $"\"{{{i}}}\"").ToCsv(", ");
                var paramPassthrus = parameters.Select(p => $"{p.Name}").ToCsv(", ");

                proxyCode.AppendLine(
                    $"        public override string {method.Name}({paramDef}) =>{Environment.NewLine}" +
                    $"            _localize(base.{method.Name}({paramPlaceHolders})){Environment.NewLine}" +
                    $"            ?? base.{method.Name}({paramPassthrus});");
            }

            var classDef = @$"
using System;

namespace {Type.Namespace}
{{
    // this class generated by {GetType().Name}.{nameof(GenerateProxyClass)}
    public class ResourcesProxy : Resources
    {{
        private readonly Func<string, string?> _localize;

        public ResourcesProxy(Func<string, string?> localize)
        {{
            _localize = localize ?? throw new ArgumentNullException(nameof(localize));
        }}
{proxyCode}
    }}
}}";
            return classDef;
        }
    }
}