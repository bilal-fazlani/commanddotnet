using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using CommandDotNet.Extensions;
using static System.Environment;

namespace CommandDotNet.TestTools
{
    public class ResourcesDef
    {
        public static ResourcesDef Parse<T>() => new(typeof(T));

        public ResourcesDef(Type type)
        {
            Properties = type
                .GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly)
                .ToCollection();
            Methods = type
                .GetMethods(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly)
                .Where(m => !m.IsSpecialName) // exclude property methods
                .ToCollection();

            Type = type;
            IsProxy = Type.BaseType != null && Type.GetConstructors().Any(c =>
            {
                var parameters = c.GetParameters();
                return parameters.Length == 1
                       && parameters.First().ParameterType == typeof(Func<string, string?>);
            });
        }

        public bool IsProxy { get; set; }
        public Type Type { get; }
        public ICollection<PropertyInfo> Properties { get; }
        public ICollection<MethodInfo> Methods { get; }

        public object? NewProxyInstance()
        {
            return IsProxy
                ? Activator.CreateInstance(Type, (Func<string, string?>)(s => s)) 
                : throw new Exception($"type:{Type.FullName} is not a proxy");
        }

        public IEnumerable<(string error, ICollection<MemberInfo> members)> Validate()
        {
            var invalid = Methods
                .Where(m => m.GetParameters().Any(p => p.ParameterType != typeof(string)))
                .Cast<MemberInfo>()
                .ToList();
            
            if (invalid.Any())
            {
                yield return ("Proxy method parameters must be of type string", invalid);
            }
        }

        public IEnumerable<string> IsMissingMembersFrom(ResourcesDef source)
        {
            var proxy = this;
            
            var missingProperties = source.Properties
                .Where(m => proxy.Properties.All(pm => pm.Name != m.Name))
                .Select(m => m.FullName(true));
                
            var missingMethods = source.Methods
                .Where(m => proxy.Methods.All(pm => pm.Name != m.Name))
                .Select(m => m.FullName(true));

            return missingProperties.Concat(missingMethods);
        }

        public IEnumerable<(MemberInfo member, string value)> GetMembersWithDefaults()
        {
            var proxy = NewProxyInstance();
            foreach (var property in Properties)
            {
                // should never be null because Proxy will use 
                // base member if the null was returned from localize function
                yield return (property, (string)property.GetValue(proxy)!);
            }
            foreach (var method in Methods)
            {
                var placeHolders = method.GetParameters()
                    .Select((_, i) => $"{{{i}}}")
                    .Cast<object>()
                    .ToArray();

                // should never be null because Proxy will use 
                // base member if the null was returned from localize function
                yield return (method, (string)method.Invoke(proxy, placeHolders)!);
            }
        }

        public string? GenerateProxyClass()
        {
            var proxyCode = new StringBuilder();

            foreach (var property in Properties)
            {
                proxyCode.AppendLine(
                    $"        public override string {property.Name} =>{NewLine}" +
                    $"            _localize(base.{property.Name}){NewLine}" +
                    $"            ?? base.{property.Name};");
            }

            proxyCode.AppendLine();

            foreach (var method in Methods)
            {
                var parameters = method.GetParameters();
                var paramDef = parameters.Select(p => $"string{(p.IsNullable() ? "?" : "")} {p.Name}").ToCsv(", ");
                var paramPlaceHolders = parameters.Select((_, i) => $"\"{{{i}}}\"").ToCsv(", ");
                var paramPassThrus = parameters.Select(p => $"{p.Name}").ToCsv(", ");

                proxyCode.AppendLine(
                    $"        public override string {method.Name}({paramDef}) =>{NewLine}" +
                    $"            _localize(base.{method.Name}({paramPlaceHolders})){NewLine}" +
                    $"            ?? base.{method.Name}({paramPassThrus});");
            }

            var classDef = @$"
using System;

namespace {Type.Namespace}
{{
    // this class generated by {GetType().Name}.{nameof(GenerateProxyClass)}
    public class ResourcesProxy : Resources
    {{
        private readonly Func<string, string?> _localize;

        public ResourcesProxy(Func<string, string?> localize)
        {{
            _localize = localize ?? throw new ArgumentNullException(nameof(localize));
        }}
{proxyCode}
    }}
}}";
            return classDef;
        }
        
        public override string ToString() => Type.FullName!;
    }
}